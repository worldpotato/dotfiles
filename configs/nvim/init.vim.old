" color scheme
colorscheme worldpotato

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
"call plug#begin('~/.vim/plugged')
"""""""""" Plugins without configu"""""""""" ration
call plug#begin('~/.config/nvim/plugged')
" Plug 'sigidagi/vim-cmake-project'
" Plug 'vhdirk/vim-cmake'
Plug 'airblade/vim-gitgutter' " shows the left column with git changes
Plug 'tpope/vim-fugitive' " git commands inside vim
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-obsession'
Plug 'ryanoasis/vim-devicons' " icons in nerdtree and status bar
Plug 'jremmen/vim-ripgrep'
Plug 'mipmip/vim-scimark'
Plug 'ludovicchabant/vim-gutentags'
Plug 'm-pilia/vim-ccls'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'preservim/vimux'
Plug 'ervandew/screen'
Plug 'dajero/VimLab'
Plug 'yinflying/matlab.vim'

"""""""""" Plugins with configuration
" NERDCOMMENTER
" Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'preservim/nerdcommenter' " simple commenting
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1


Plug 'itchyny/lightline.vim'
Plug 'taohexxx/lightline-buffer'
" use lightline-buffer in lightline
set noshowmode
set showtabline=2
" lightline-buffer ui settings
" replace these symbols with ascii characters if your environment does not support unicode
let g:lightline_buffer_logo = ' '
let g:lightline_buffer_readonly_icon = ''
let g:lightline_buffer_modified_icon = '✭'
let g:lightline_buffer_git_icon = ' '
let g:lightline_buffer_ellipsis_icon = '..'
let g:lightline_buffer_expand_left_icon = '◀ '
let g:lightline_buffer_expand_right_icon = ' ▶'
let g:lightline_buffer_active_buffer_left_icon = ''
let g:lightline_buffer_active_buffer_right_icon = ''
let g:lightline_buffer_separator_icon = '  '
" enable devicons, only support utf-8
" require <https://github.com/ryanoasis/vim-devicons>
let g:lightline_buffer_enable_devicons = 1
" lightline-buffer function settings
let g:lightline_buffer_show_bufnr = 1
" :help filename-modifiers
let g:lightline_buffer_fname_mod = ':t'
" hide buffer list
let g:lightline_buffer_excludes = ['vimfiler']
" max file name length
let g:lightline_buffer_maxflen = 30
" max file extension length
let g:lightline_buffer_maxfextlen = 3
" min file name length
let g:lightline_buffer_minflen = 16
" min file extension length
let g:lightline_buffer_minfextlen = 3
" reserve length for other component (e.g. info, close)
let g:lightline_buffer_reservelen = 20
let g:lightline = {
    \ 'colorscheme': 'colorpotato',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'tabline': {
    \   'left': [ [ 'bufferinfo' ],
    \             [ 'separator' ],
    \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
    \   'right': [],
    \ },
    \ 'component_expand': {
    \   'buffercurrent': 'lightline#buffer#buffercurrent',
    \   'bufferbefore': 'lightline#buffer#bufferbefore',
    \   'bufferafter': 'lightline#buffer#bufferafter',
    \ },
    \ 'component_type': {
    \   'buffercurrent': 'tabsel',
    \   'bufferbefore': 'raw',
    \   'bufferafter': 'raw',
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead',
    \   'bufferinfo': 'lightline#buffer#bufferinfo',
    \ },
    \ 'component': {
    \   'separator': '',
    \ },
    \ }

" LATEX
Plug 'lervag/vimtex'
let g:vimtex_compiler_method='latexmk'
let g:vimtex_view_method = 'zathura'
let g:vimtex_complete_close_braces = 0
let g:vimtex_fold_enabled = 1


Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

Plug 'deoplete-plugins/deoplete-clang'


" One of the must have plugins
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

Plug 'tibabit/vim-templates'
let g:tmpl_search_paths = ['~/.config/nvim/templates']  
let g:tmpl_author = 'Felix Strobel'
let g:teml_email = 'mail@felixstrobel.de'

Plug 'jackguo380/vim-lsp-cxx-highlight'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:lsp_cxx_hl_use_text_props = 1

Plug 'rhysd/vim-clang-format'
let g:clang_format#code_style = 'WebKit'
let g:clang_format#style_options = {"Standard" : "c++20"}

Plug 'ilyachur/cmake4vim'
let g:cmake_build_dir = 'bin'
let g:cmake_build_type = 'Debug'
let g:cmake_reload_after_save = 0
nnoremap <leader>xc :CMake<cr>
nnoremap <leader>xb :CMakeBuild<cr>
nnoremap <leader>xr :CMakeReset<cr>

Plug 'majutsushi/tagbar'
let g:tagbar_sort = 0

Plug 'vimlab/split-term.vim'
set splitbelow

Plug 'vimwiki/vimwiki'
" let g:vimwiki_list = [{'path': '~/nextcloud/notes/',
"                       \ 'syntax': 'markdown', 'ext': '.md'}]

" vimwiki 
let wiki_1 = {}
let wiki_1.path = '~/nextcloud/wikis/lessons/'
let wiki_1.path_html = '~/nextcloud/lessons/html'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'

let wiki_2 = {}
let wiki_2.path = '~/nextcloud/wikis/labor/'
let wiki_2.path_html = '~/nextcloud/labor/html'
let wiki_2.syntax = 'markdown'
let wiki_2.ext = '.md'

let wiki_3 = {}
let wiki_3.path = '~/nextcloud/wikis/private/'
let wiki_3.path_html = '~/nextcloud/private/html'
let wiki_3.syntax = 'markdown'
let wiki_3.ext = '.md'

let g:vimwiki_list = [wiki_1, wiki_2, wiki_3]

let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" Makes vimwiki markdown links as [text](text.md) instead of [text][text]
let g:vimwiki_markdown_link_ext = 1

Plug 'tbabej/taskwiki'
let g:taskwiki_markup_syntax = 'markdown'

Plug 'plasticboy/vim-markdown'
let g:markdown_folding = 1


Plug 'chaoren/vim-wordmotion'
    nmap w          <Plug>WordMotion_w
    nmap b          <Plug>WordMotion_b
    nmap gE         <Plug>WordMotion_gE
    omap aW         <Plug>WordMotion_aW
    cmap <C-R><C-W> <Plug>WordMotion_<C-R><C-W>

Plug 'neovim/nvim-lspconfig'

Plug 'taketwo/vim-ros'
" let g:ros_make = "current"
let g:ros_catkin_make_options = '-DCMAKE_BUILD_TYPE=Debug'
let g:ros_disable_warnings = 1

" Initialize plugin system
" ===================================================================
call plug#end()

" nvim-lsp config
luafile ~/.config/nvim/lspconfig.lua

" escape to normal mode in terminal window
" tnoremap <leader><Esc> <C-\><C-n>

let g:termdebug_wide = 10
let g:termdebug_use_prompt = 0

" settings for booth, c and c++
fun CAndCppSettings()
    packadd termdebug
    let g:termdebug_wide = 10
    let g:termdebug_use_prompt = 0
    nnoremap <leader>db :Termdebug<CR>
    nnoremap <leader>ds :Step<CR>
    nnoremap <leader>dn :Over<CR>
    nnoremap <leader>df :Finish<CR>
    nnoremap <leader>dc :Continue<CR>
    nnoremap <leader>dbr :Break<CR>
    nnoremap <leader>dSt :Stop<CR>
endfun

au FileType c ks|call CSettings()|'s
fun CSettings()
    Tagbar
    call CAndCppSettings()
    set makeprg=gcc\ %
endfun

au FileType cpp ks|call CppSettings()|'s
fun CppSettings()
    Tagbar
    call CAndCppSettings()
    set makeprg=g++\ %
endfun

" set the line number behaviour
set number relativenumber
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"This allows for change paste motion cp{motion}
nmap <silent> cp :set opfunc=ChangePaste<CR>g@
function! ChangePaste(type, ...)
    silent exe "normal! `[v`]\"_c"
    silent exe "normal! p"
endfunction


" Syntax
syntax on
" color for the vertical and horizontal line
set cursorline
set cursorcolumn
" Height of the command bar
set cmdheight=2
" Behavior of tab stop
set expandtab
set tabstop=4
set shiftwidth=4
" FONT
set guifont=JetBrainsMono\ Nerd\ Font\ Mono
" Highlight search results
set hlsearch
" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=10
" autoreads a file if it is changed outside
set autoread
" break the line at the end or start of a word
set linebreak
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases
set smartcase
" Makes search act like search in modern browsers
set incsearch
" share clipboard with x
set clipboard=unnamedplus
" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500
" show unprintable characters
set listchars=eol:¬,tab:\┣━,trail:~,extends:>,precedes:<,
set list
" shows options for tabcompletion
set wildmenu
" add some sort of fuzzy completion
set path+=**
" enable to change buffer even if it has changes
set hidden
" remove weird "O" behaviour
set ttimeout
set ttimeoutlen=50

" special own commands
command! Today :read !date --iso-8601

" Keybindings
nnoremap <Leader>b :Buffers<cr>
nnoremap <Leader>f :Files<cr>

" no timeout for leader
set notimeout

" filetype for launch files
au BufRead,BufNewFile *.launch setfiletype xml

  nnoremap <silent> <c-]>        <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <silent> K            <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <silent> gi           <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent> <c-k>        <cmd>lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent> gd           <cmd>lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent> gr           <cmd>lua vim.lsp.buf.references()<CR>
  nnoremap <silent> g0           <cmd>lua vim.lsp.buf.document_symbol()<CR>
  nnoremap <silent> gW           <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
  nnoremap <silent> gD           <cmd>lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent> gR           <cmd>lua vim.lsp.buf.rename()<CR>
  nnoremap <silent> <space>      <cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>
  nnoremap <silent> <space>wl    <cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <A-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <A-j> :TmuxNavigateDown<cr>
nnoremap <silent> <A-k> :TmuxNavigateUp<cr>
nnoremap <silent> <A-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <A-h> :TmuxNavigatePrevious<cr>

autocmd BufEnter *.m compiler mlint
